typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

typedef char GLchar;
typedef double GLclampd;
typedef double GLdouble;
typedef float GLclampf;
typedef float GLfloat;
typedef int GLint;
typedef int GLsizei;
typedef short GLshort;
typedef signed char GLbyte;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef unsigned short GLushort;
typedef void GLvoid;

typedef khronos_ssize_t GLsizeiptr;
typedef khronos_intptr_t GLintptr;

const GLenum GL_DEPTH_BUFFER_BIT               = 0x00000100;
const GLenum GL_STENCIL_BUFFER_BIT             = 0x00000400;
const GLenum GL_COLOR_BUFFER_BIT               = 0x00004000;
const GLenum GL_FALSE                          = 0;
const GLenum GL_TRUE                           = 1;
const GLenum GL_POINTS                         = 0x0000;
const GLenum GL_LINES                          = 0x0001;
const GLenum GL_LINE_LOOP                      = 0x0002;
const GLenum GL_LINE_STRIP                     = 0x0003;
const GLenum GL_TRIANGLES                      = 0x0004;
const GLenum GL_TRIANGLE_STRIP                 = 0x0005;
const GLenum GL_TRIANGLE_FAN                   = 0x0006;
const GLenum GL_ZERO                           = 0;
const GLenum GL_ONE                            = 1;
const GLenum GL_SRC_COLOR                      = 0x0300;
const GLenum GL_ONE_MINUS_SRC_COLOR            = 0x0301;
const GLenum GL_SRC_ALPHA                      = 0x0302;
const GLenum GL_ONE_MINUS_SRC_ALPHA            = 0x0303;
const GLenum GL_DST_ALPHA                      = 0x0304;
const GLenum GL_ONE_MINUS_DST_ALPHA            = 0x0305;
const GLenum GL_DST_COLOR                      = 0x0306;
const GLenum GL_ONE_MINUS_DST_COLOR            = 0x0307;
const GLenum GL_SRC_ALPHA_SATURATE             = 0x0308;
const GLenum GL_FUNC_ADD                       = 0x8006;
const GLenum GL_BLEND_EQUATION                 = 0x8009;
const GLenum GL_BLEND_EQUATION_RGB             = 0x8009;
const GLenum GL_BLEND_EQUATION_ALPHA           = 0x883D;
const GLenum GL_FUNC_SUBTRACT                  = 0x800A;
const GLenum GL_FUNC_REVERSE_SUBTRACT          = 0x800B;
const GLenum GL_BLEND_DST_RGB                  = 0x80C8;
const GLenum GL_BLEND_SRC_RGB                  = 0x80C9;
const GLenum GL_BLEND_DST_ALPHA                = 0x80CA;
const GLenum GL_BLEND_SRC_ALPHA                = 0x80CB;
const GLenum GL_CONSTANT_COLOR                 = 0x8001;
const GLenum GL_ONE_MINUS_CONSTANT_COLOR       = 0x8002;
const GLenum GL_CONSTANT_ALPHA                 = 0x8003;
const GLenum GL_ONE_MINUS_CONSTANT_ALPHA       = 0x8004;
const GLenum GL_BLEND_COLOR                    = 0x8005;
const GLenum GL_ARRAY_BUFFER                   = 0x8892;
const GLenum GL_ELEMENT_ARRAY_BUFFER           = 0x8893;
const GLenum GL_ARRAY_BUFFER_BINDING           = 0x8894;
const GLenum GL_ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;
const GLenum GL_STREAM_DRAW                    = 0x88E0;
const GLenum GL_STATIC_DRAW                    = 0x88E4;
const GLenum GL_DYNAMIC_DRAW                   = 0x88E8;
const GLenum GL_BUFFER_SIZE                    = 0x8764;
const GLenum GL_BUFFER_USAGE                   = 0x8765;
const GLenum GL_CURRENT_VERTEX_ATTRIB          = 0x8626;
const GLenum GL_FRONT                          = 0x0404;
const GLenum GL_BACK                           = 0x0405;
const GLenum GL_FRONT_AND_BACK                 = 0x0408;
const GLenum GL_TEXTURE_2D                     = 0x0DE1;
const GLenum GL_CULL_FACE                      = 0x0B44;
const GLenum GL_BLEND                          = 0x0BE2;
const GLenum GL_DITHER                         = 0x0BD0;
const GLenum GL_STENCIL_TEST                   = 0x0B90;
const GLenum GL_DEPTH_TEST                     = 0x0B71;
const GLenum GL_SCISSOR_TEST                   = 0x0C11;
const GLenum GL_POLYGON_OFFSET_FILL            = 0x8037;
const GLenum GL_SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;
const GLenum GL_SAMPLE_COVERAGE                = 0x80A0;
const GLenum GL_NO_ERROR                       = 0;
const GLenum GL_INVALID_ENUM                   = 0x0500;
const GLenum GL_INVALID_VALUE                  = 0x0501;
const GLenum GL_INVALID_OPERATION              = 0x0502;
const GLenum GL_OUT_OF_MEMORY                  = 0x0505;
const GLenum GL_CW                             = 0x0900;
const GLenum GL_CCW                            = 0x0901;
const GLenum GL_LINE_WIDTH                     = 0x0B21;
const GLenum GL_ALIASED_POINT_SIZE_RANGE       = 0x846D;
const GLenum GL_ALIASED_LINE_WIDTH_RANGE       = 0x846E;
const GLenum GL_CULL_FACE_MODE                 = 0x0B45;
const GLenum GL_FRONT_FACE                     = 0x0B46;
const GLenum GL_DEPTH_RANGE                    = 0x0B70;
const GLenum GL_DEPTH_WRITEMASK                = 0x0B72;
const GLenum GL_DEPTH_CLEAR_VALUE              = 0x0B73;
const GLenum GL_DEPTH_FUNC                     = 0x0B74;
const GLenum GL_STENCIL_CLEAR_VALUE            = 0x0B91;
const GLenum GL_STENCIL_FUNC                   = 0x0B92;
const GLenum GL_STENCIL_FAIL                   = 0x0B94;
const GLenum GL_STENCIL_PASS_DEPTH_FAIL        = 0x0B95;
const GLenum GL_STENCIL_PASS_DEPTH_PASS        = 0x0B96;
const GLenum GL_STENCIL_REF                    = 0x0B97;
const GLenum GL_STENCIL_VALUE_MASK             = 0x0B93;
const GLenum GL_STENCIL_WRITEMASK              = 0x0B98;
const GLenum GL_STENCIL_BACK_FUNC              = 0x8800;
const GLenum GL_STENCIL_BACK_FAIL              = 0x8801;
const GLenum GL_STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;
const GLenum GL_STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;
const GLenum GL_STENCIL_BACK_REF               = 0x8CA3;
const GLenum GL_STENCIL_BACK_VALUE_MASK        = 0x8CA4;
const GLenum GL_STENCIL_BACK_WRITEMASK         = 0x8CA5;
const GLenum GL_VIEWPORT                       = 0x0BA2;
const GLenum GL_SCISSOR_BOX                    = 0x0C10;
const GLenum GL_COLOR_CLEAR_VALUE              = 0x0C22;
const GLenum GL_COLOR_WRITEMASK                = 0x0C23;
const GLenum GL_UNPACK_ALIGNMENT               = 0x0CF5;
const GLenum GL_PACK_ALIGNMENT                 = 0x0D05;
const GLenum GL_MAX_TEXTURE_SIZE               = 0x0D33;
const GLenum GL_MAX_VIEWPORT_DIMS              = 0x0D3A;
const GLenum GL_SUBPIXEL_BITS                  = 0x0D50;
const GLenum GL_RED_BITS                       = 0x0D52;
const GLenum GL_GREEN_BITS                     = 0x0D53;
const GLenum GL_BLUE_BITS                      = 0x0D54;
const GLenum GL_ALPHA_BITS                     = 0x0D55;
const GLenum GL_DEPTH_BITS                     = 0x0D56;
const GLenum GL_STENCIL_BITS                   = 0x0D57;
const GLenum GL_POLYGON_OFFSET_UNITS           = 0x2A00;
const GLenum GL_POLYGON_OFFSET_FACTOR          = 0x8038;
const GLenum GL_TEXTURE_BINDING_2D             = 0x8069;
const GLenum GL_SAMPLE_BUFFERS                 = 0x80A8;
const GLenum GL_SAMPLES                        = 0x80A9;
const GLenum GL_SAMPLE_COVERAGE_VALUE          = 0x80AA;
const GLenum GL_SAMPLE_COVERAGE_INVERT         = 0x80AB;
const GLenum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
const GLenum GL_COMPRESSED_TEXTURE_FORMATS     = 0x86A3;
const GLenum GL_DONT_CARE                      = 0x1100;
const GLenum GL_FASTEST                        = 0x1101;
const GLenum GL_NICEST                         = 0x1102;
const GLenum GL_GENERATE_MIPMAP_HINT           = 0x8192;
const GLenum GL_BYTE                           = 0x1400;
const GLenum GL_UNSIGNED_BYTE                  = 0x1401;
const GLenum GL_SHORT                          = 0x1402;
const GLenum GL_UNSIGNED_SHORT                 = 0x1403;
const GLenum GL_INT                            = 0x1404;
const GLenum GL_UNSIGNED_INT                   = 0x1405;
const GLenum GL_FLOAT                          = 0x1406;
const GLenum GL_FIXED                          = 0x140C;
const GLenum GL_DEPTH_COMPONENT                = 0x1902;
const GLenum GL_ALPHA                          = 0x1906;
const GLenum GL_RGB                            = 0x1907;
const GLenum GL_RGBA                           = 0x1908;
const GLenum GL_LUMINANCE                      = 0x1909;
const GLenum GL_LUMINANCE_ALPHA                = 0x190A;
const GLenum GL_UNSIGNED_SHORT_4_4_4_4         = 0x8033;
const GLenum GL_UNSIGNED_SHORT_5_5_5_1         = 0x8034;
const GLenum GL_UNSIGNED_SHORT_5_6_5           = 0x8363;
const GLenum GL_FRAGMENT_SHADER                = 0x8B30;
const GLenum GL_VERTEX_SHADER                  = 0x8B31;
const GLenum GL_MAX_VERTEX_ATTRIBS             = 0x8869;
const GLenum GL_MAX_VERTEX_UNIFORM_VECTORS     = 0x8DFB;
const GLenum GL_MAX_VARYING_VECTORS            = 0x8DFC;
const GLenum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GLenum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GLenum GL_MAX_TEXTURE_IMAGE_UNITS        = 0x8872;
const GLenum GL_MAX_FRAGMENT_UNIFORM_VECTORS   = 0x8DFD;
const GLenum GL_SHADER_TYPE                    = 0x8B4F;
const GLenum GL_DELETE_STATUS                  = 0x8B80;
const GLenum GL_LINK_STATUS                    = 0x8B82;
const GLenum GL_VALIDATE_STATUS                = 0x8B83;
const GLenum GL_ATTACHED_SHADERS               = 0x8B85;
const GLenum GL_ACTIVE_UNIFORMS                = 0x8B86;
const GLenum GL_ACTIVE_UNIFORM_MAX_LENGTH      = 0x8B87;
const GLenum GL_ACTIVE_ATTRIBUTES              = 0x8B89;
const GLenum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    = 0x8B8A;
const GLenum GL_SHADING_LANGUAGE_VERSION       = 0x8B8C;
const GLenum GL_CURRENT_PROGRAM                = 0x8B8D;
const GLenum GL_NEVER                          = 0x0200;
const GLenum GL_LESS                           = 0x0201;
const GLenum GL_EQUAL                          = 0x0202;
const GLenum GL_LEQUAL                         = 0x0203;
const GLenum GL_GREATER                        = 0x0204;
const GLenum GL_NOTEQUAL                       = 0x0205;
const GLenum GL_GEQUAL                         = 0x0206;
const GLenum GL_ALWAYS                         = 0x0207;
const GLenum GL_KEEP                           = 0x1E00;
const GLenum GL_REPLACE                        = 0x1E01;
const GLenum GL_INCR                           = 0x1E02;
const GLenum GL_DECR                           = 0x1E03;
const GLenum GL_INVERT                         = 0x150A;
const GLenum GL_INCR_WRAP                      = 0x8507;
const GLenum GL_DECR_WRAP                      = 0x8508;
const GLenum GL_VENDOR                         = 0x1F00;
const GLenum GL_RENDERER                       = 0x1F01;
const GLenum GL_VERSION                        = 0x1F02;
const GLenum GL_EXTENSIONS                     = 0x1F03;
const GLenum GL_NEAREST                        = 0x2600;
const GLenum GL_LINEAR                         = 0x2601;
const GLenum GL_NEAREST_MIPMAP_NEAREST         = 0x2700;
const GLenum GL_LINEAR_MIPMAP_NEAREST          = 0x2701;
const GLenum GL_NEAREST_MIPMAP_LINEAR          = 0x2702;
const GLenum GL_LINEAR_MIPMAP_LINEAR           = 0x2703;
const GLenum GL_TEXTURE_MAG_FILTER             = 0x2800;
const GLenum GL_TEXTURE_MIN_FILTER             = 0x2801;
const GLenum GL_TEXTURE_WRAP_S                 = 0x2802;
const GLenum GL_TEXTURE_WRAP_T                 = 0x2803;
const GLenum GL_TEXTURE                        = 0x1702;
const GLenum GL_TEXTURE_CUBE_MAP               = 0x8513;
const GLenum GL_TEXTURE_BINDING_CUBE_MAP       = 0x8514;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;
const GLenum GL_MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;
const GLenum GL_TEXTURE0                       = 0x84C0;
const GLenum GL_TEXTURE1                       = 0x84C1;
const GLenum GL_TEXTURE2                       = 0x84C2;
const GLenum GL_TEXTURE3                       = 0x84C3;
const GLenum GL_TEXTURE4                       = 0x84C4;
const GLenum GL_TEXTURE5                       = 0x84C5;
const GLenum GL_TEXTURE6                       = 0x84C6;
const GLenum GL_TEXTURE7                       = 0x84C7;
const GLenum GL_TEXTURE8                       = 0x84C8;
const GLenum GL_TEXTURE9                       = 0x84C9;
const GLenum GL_TEXTURE10                      = 0x84CA;
const GLenum GL_TEXTURE11                      = 0x84CB;
const GLenum GL_TEXTURE12                      = 0x84CC;
const GLenum GL_TEXTURE13                      = 0x84CD;
const GLenum GL_TEXTURE14                      = 0x84CE;
const GLenum GL_TEXTURE15                      = 0x84CF;
const GLenum GL_TEXTURE16                      = 0x84D0;
const GLenum GL_TEXTURE17                      = 0x84D1;
const GLenum GL_TEXTURE18                      = 0x84D2;
const GLenum GL_TEXTURE19                      = 0x84D3;
const GLenum GL_TEXTURE20                      = 0x84D4;
const GLenum GL_TEXTURE21                      = 0x84D5;
const GLenum GL_TEXTURE22                      = 0x84D6;
const GLenum GL_TEXTURE23                      = 0x84D7;
const GLenum GL_TEXTURE24                      = 0x84D8;
const GLenum GL_TEXTURE25                      = 0x84D9;
const GLenum GL_TEXTURE26                      = 0x84DA;
const GLenum GL_TEXTURE27                      = 0x84DB;
const GLenum GL_TEXTURE28                      = 0x84DC;
const GLenum GL_TEXTURE29                      = 0x84DD;
const GLenum GL_TEXTURE30                      = 0x84DE;
const GLenum GL_TEXTURE31                      = 0x84DF;
const GLenum GL_ACTIVE_TEXTURE                 = 0x84E0;
const GLenum GL_REPEAT                         = 0x2901;
const GLenum GL_CLAMP_TO_EDGE                  = 0x812F;
const GLenum GL_MIRRORED_REPEAT                = 0x8370;
const GLenum GL_FLOAT_VEC2                     = 0x8B50;
const GLenum GL_FLOAT_VEC3                     = 0x8B51;
const GLenum GL_FLOAT_VEC4                     = 0x8B52;
const GLenum GL_INT_VEC2                       = 0x8B53;
const GLenum GL_INT_VEC3                       = 0x8B54;
const GLenum GL_INT_VEC4                       = 0x8B55;
const GLenum GL_BOOL                           = 0x8B56;
const GLenum GL_BOOL_VEC2                      = 0x8B57;
const GLenum GL_BOOL_VEC3                      = 0x8B58;
const GLenum GL_BOOL_VEC4                      = 0x8B59;
const GLenum GL_FLOAT_MAT2                     = 0x8B5A;
const GLenum GL_FLOAT_MAT3                     = 0x8B5B;
const GLenum GL_FLOAT_MAT4                     = 0x8B5C;
const GLenum GL_SAMPLER_2D                     = 0x8B5E;
const GLenum GL_SAMPLER_CUBE                   = 0x8B60;
const GLenum GL_VERTEX_ATTRIB_ARRAY_ENABLED    = 0x8622;
const GLenum GL_VERTEX_ATTRIB_ARRAY_SIZE       = 0x8623;
const GLenum GL_VERTEX_ATTRIB_ARRAY_STRIDE     = 0x8624;
const GLenum GL_VERTEX_ATTRIB_ARRAY_TYPE       = 0x8625;
const GLenum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GLenum GL_VERTEX_ATTRIB_ARRAY_POINTER    = 0x8645;
const GLenum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GLenum GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GLenum GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GLenum GL_COMPILE_STATUS                 = 0x8B81;
const GLenum GL_INFO_LOG_LENGTH                = 0x8B84;
const GLenum GL_SHADER_SOURCE_LENGTH           = 0x8B88;
const GLenum GL_SHADER_COMPILER                = 0x8DFA;
const GLenum GL_SHADER_BINARY_FORMATS          = 0x8DF8;
const GLenum GL_NUM_SHADER_BINARY_FORMATS      = 0x8DF9;
const GLenum GL_LOW_FLOAT                      = 0x8DF0;
const GLenum GL_MEDIUM_FLOAT                   = 0x8DF1;
const GLenum GL_HIGH_FLOAT                     = 0x8DF2;
const GLenum GL_LOW_INT                        = 0x8DF3;
const GLenum GL_MEDIUM_INT                     = 0x8DF4;
const GLenum GL_HIGH_INT                       = 0x8DF5;
const GLenum GL_FRAMEBUFFER                    = 0x8D40;
const GLenum GL_RENDERBUFFER                   = 0x8D41;
const GLenum GL_RGBA4                          = 0x8056;
const GLenum GL_RGB5_A1                        = 0x8057;
const GLenum GL_RGB565                         = 0x8D62;
const GLenum GL_DEPTH_COMPONENT16              = 0x81A5;
const GLenum GL_STENCIL_INDEX8                 = 0x8D48;
const GLenum GL_RENDERBUFFER_WIDTH             = 0x8D42;
const GLenum GL_RENDERBUFFER_HEIGHT            = 0x8D43;
const GLenum GL_RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;
const GLenum GL_RENDERBUFFER_RED_SIZE          = 0x8D50;
const GLenum GL_RENDERBUFFER_GREEN_SIZE        = 0x8D51;
const GLenum GL_RENDERBUFFER_BLUE_SIZE         = 0x8D52;
const GLenum GL_RENDERBUFFER_ALPHA_SIZE        = 0x8D53;
const GLenum GL_RENDERBUFFER_DEPTH_SIZE        = 0x8D54;
const GLenum GL_RENDERBUFFER_STENCIL_SIZE      = 0x8D55;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GLenum GL_COLOR_ATTACHMENT0              = 0x8CE0;
const GLenum GL_DEPTH_ATTACHMENT               = 0x8D00;
const GLenum GL_STENCIL_ATTACHMENT             = 0x8D20;
const GLenum GL_NONE                           = 0;
const GLenum GL_FRAMEBUFFER_COMPLETE           = 0x8CD5;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
const GLenum GL_FRAMEBUFFER_UNSUPPORTED        = 0x8CDD;
const GLenum GL_FRAMEBUFFER_BINDING            = 0x8CA6;
const GLenum GL_RENDERBUFFER_BINDING           = 0x8CA7;
const GLenum GL_MAX_RENDERBUFFER_SIZE          = 0x84E8;
const GLenum GL_INVALID_FRAMEBUFFER_OPERATION  = 0x0506;

const GLenum GL_READ_BUFFER                    = 0x0C02;
const GLenum GL_UNPACK_ROW_LENGTH              = 0x0CF2;
const GLenum GL_UNPACK_SKIP_ROWS               = 0x0CF3;
const GLenum GL_UNPACK_SKIP_PIXELS             = 0x0CF4;
const GLenum GL_PACK_ROW_LENGTH                = 0x0D02;
const GLenum GL_PACK_SKIP_ROWS                 = 0x0D03;
const GLenum GL_PACK_SKIP_PIXELS               = 0x0D04;
const GLenum GL_COLOR                          = 0x1800;
const GLenum GL_DEPTH                          = 0x1801;
const GLenum GL_STENCIL                        = 0x1802;
const GLenum GL_RED                            = 0x1903;
const GLenum GL_RGB8                           = 0x8051;
const GLenum GL_RGBA8                          = 0x8058;
const GLenum GL_RGB10_A2                       = 0x8059;
const GLenum GL_TEXTURE_BINDING_3D             = 0x806A;
const GLenum GL_UNPACK_SKIP_IMAGES             = 0x806D;
const GLenum GL_UNPACK_IMAGE_HEIGHT            = 0x806E;
const GLenum GL_TEXTURE_3D                     = 0x806F;
const GLenum GL_TEXTURE_WRAP_R                 = 0x8072;
const GLenum GL_MAX_3D_TEXTURE_SIZE            = 0x8073;
const GLenum GL_UNSIGNED_INT_2_10_10_10_REV    = 0x8368;
const GLenum GL_MAX_ELEMENTS_VERTICES          = 0x80E8;
const GLenum GL_MAX_ELEMENTS_INDICES           = 0x80E9;
const GLenum GL_TEXTURE_MIN_LOD                = 0x813A;
const GLenum GL_TEXTURE_MAX_LOD                = 0x813B;
const GLenum GL_TEXTURE_BASE_LEVEL             = 0x813C;
const GLenum GL_TEXTURE_MAX_LEVEL              = 0x813D;
const GLenum GL_MIN                            = 0x8007;
const GLenum GL_MAX                            = 0x8008;
const GLenum GL_DEPTH_COMPONENT24              = 0x81A6;
const GLenum GL_MAX_TEXTURE_LOD_BIAS           = 0x84FD;
const GLenum GL_TEXTURE_COMPARE_MODE           = 0x884C;
const GLenum GL_TEXTURE_COMPARE_FUNC           = 0x884D;
const GLenum GL_CURRENT_QUERY                  = 0x8865;
const GLenum GL_QUERY_RESULT                   = 0x8866;
const GLenum GL_QUERY_RESULT_AVAILABLE         = 0x8867;
const GLenum GL_BUFFER_MAPPED                  = 0x88BC;
const GLenum GL_BUFFER_MAP_POINTER             = 0x88BD;
const GLenum GL_STREAM_READ                    = 0x88E1;
const GLenum GL_STREAM_COPY                    = 0x88E2;
const GLenum GL_STATIC_READ                    = 0x88E5;
const GLenum GL_STATIC_COPY                    = 0x88E6;
const GLenum GL_DYNAMIC_READ                   = 0x88E9;
const GLenum GL_DYNAMIC_COPY                   = 0x88EA;
const GLenum GL_MAX_DRAW_BUFFERS               = 0x8824;
const GLenum GL_DRAW_BUFFER0                   = 0x8825;
const GLenum GL_DRAW_BUFFER1                   = 0x8826;
const GLenum GL_DRAW_BUFFER2                   = 0x8827;
const GLenum GL_DRAW_BUFFER3                   = 0x8828;
const GLenum GL_DRAW_BUFFER4                   = 0x8829;
const GLenum GL_DRAW_BUFFER5                   = 0x882A;
const GLenum GL_DRAW_BUFFER6                   = 0x882B;
const GLenum GL_DRAW_BUFFER7                   = 0x882C;
const GLenum GL_DRAW_BUFFER8                   = 0x882D;
const GLenum GL_DRAW_BUFFER9                   = 0x882E;
const GLenum GL_DRAW_BUFFER10                  = 0x882F;
const GLenum GL_DRAW_BUFFER11                  = 0x8830;
const GLenum GL_DRAW_BUFFER12                  = 0x8831;
const GLenum GL_DRAW_BUFFER13                  = 0x8832;
const GLenum GL_DRAW_BUFFER14                  = 0x8833;
const GLenum GL_DRAW_BUFFER15                  = 0x8834;
const GLenum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GLenum GL_MAX_VERTEX_UNIFORM_COMPONENTS  = 0x8B4A;
const GLenum GL_SAMPLER_3D                     = 0x8B5F;
const GLenum GL_SAMPLER_2D_SHADOW              = 0x8B62;
const GLenum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GLenum GL_PIXEL_PACK_BUFFER              = 0x88EB;
const GLenum GL_PIXEL_UNPACK_BUFFER            = 0x88EC;
const GLenum GL_PIXEL_PACK_BUFFER_BINDING      = 0x88ED;
const GLenum GL_PIXEL_UNPACK_BUFFER_BINDING    = 0x88EF;
const GLenum GL_FLOAT_MAT2x3                   = 0x8B65;
const GLenum GL_FLOAT_MAT2x4                   = 0x8B66;
const GLenum GL_FLOAT_MAT3x2                   = 0x8B67;
const GLenum GL_FLOAT_MAT3x4                   = 0x8B68;
const GLenum GL_FLOAT_MAT4x2                   = 0x8B69;
const GLenum GL_FLOAT_MAT4x3                   = 0x8B6A;
const GLenum GL_SRGB                           = 0x8C40;
const GLenum GL_SRGB8                          = 0x8C41;
const GLenum GL_SRGB8_ALPHA8                   = 0x8C43;
const GLenum GL_COMPARE_REF_TO_TEXTURE         = 0x884E;
const GLenum GL_MAJOR_VERSION                  = 0x821B;
const GLenum GL_MINOR_VERSION                  = 0x821C;
const GLenum GL_NUM_EXTENSIONS                 = 0x821D;
const GLenum GL_RGBA32F                        = 0x8814;
const GLenum GL_RGB32F                         = 0x8815;
const GLenum GL_RGBA16F                        = 0x881A;
const GLenum GL_RGB16F                         = 0x881B;
const GLenum GL_VERTEX_ATTRIB_ARRAY_INTEGER    = 0x88FD;
const GLenum GL_MAX_ARRAY_TEXTURE_LAYERS       = 0x88FF;
const GLenum GL_MIN_PROGRAM_TEXEL_OFFSET       = 0x8904;
const GLenum GL_MAX_PROGRAM_TEXEL_OFFSET       = 0x8905;
const GLenum GL_MAX_VARYING_COMPONENTS         = 0x8B4B;
const GLenum GL_TEXTURE_2D_ARRAY               = 0x8C1A;
const GLenum GL_TEXTURE_BINDING_2D_ARRAY       = 0x8C1D;
const GLenum GL_R11F_G11F_B10F                 = 0x8C3A;
const GLenum GL_UNSIGNED_INT_10F_11F_11F_REV   = 0x8C3B;
const GLenum GL_RGB9_E5                        = 0x8C3D;
const GLenum GL_UNSIGNED_INT_5_9_9_9_REV       = 0x8C3E;
const GLenum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GLenum GL_TRANSFORM_FEEDBACK_VARYINGS    = 0x8C83;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GLenum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GLenum GL_RASTERIZER_DISCARD             = 0x8C89;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GLenum GL_INTERLEAVED_ATTRIBS            = 0x8C8C;
const GLenum GL_SEPARATE_ATTRIBS               = 0x8C8D;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER      = 0x8C8E;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GLenum GL_RGBA32UI                       = 0x8D70;
const GLenum GL_RGB32UI                        = 0x8D71;
const GLenum GL_RGBA16UI                       = 0x8D76;
const GLenum GL_RGB16UI                        = 0x8D77;
const GLenum GL_RGBA8UI                        = 0x8D7C;
const GLenum GL_RGB8UI                         = 0x8D7D;
const GLenum GL_RGBA32I                        = 0x8D82;
const GLenum GL_RGB32I                         = 0x8D83;
const GLenum GL_RGBA16I                        = 0x8D88;
const GLenum GL_RGB16I                         = 0x8D89;
const GLenum GL_RGBA8I                         = 0x8D8E;
const GLenum GL_RGB8I                          = 0x8D8F;
const GLenum GL_RED_INTEGER                    = 0x8D94;
const GLenum GL_RGB_INTEGER                    = 0x8D98;
const GLenum GL_RGBA_INTEGER                   = 0x8D99;
const GLenum GL_SAMPLER_2D_ARRAY               = 0x8DC1;
const GLenum GL_SAMPLER_2D_ARRAY_SHADOW        = 0x8DC4;
const GLenum GL_SAMPLER_CUBE_SHADOW            = 0x8DC5;
const GLenum GL_UNSIGNED_INT_VEC2              = 0x8DC6;
const GLenum GL_UNSIGNED_INT_VEC3              = 0x8DC7;
const GLenum GL_UNSIGNED_INT_VEC4              = 0x8DC8;
const GLenum GL_INT_SAMPLER_2D                 = 0x8DCA;
const GLenum GL_INT_SAMPLER_3D                 = 0x8DCB;
const GLenum GL_INT_SAMPLER_CUBE               = 0x8DCC;
const GLenum GL_INT_SAMPLER_2D_ARRAY           = 0x8DCF;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D        = 0x8DD2;
const GLenum GL_UNSIGNED_INT_SAMPLER_3D        = 0x8DD3;
const GLenum GL_UNSIGNED_INT_SAMPLER_CUBE      = 0x8DD4;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  = 0x8DD7;
const GLenum GL_BUFFER_ACCESS_FLAGS            = 0x911F;
const GLenum GL_BUFFER_MAP_LENGTH              = 0x9120;
const GLenum GL_BUFFER_MAP_OFFSET              = 0x9121;
const GLenum GL_DEPTH_COMPONENT32F             = 0x8CAC;
const GLenum GL_DEPTH32F_STENCIL8              = 0x8CAD;
const GLenum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GLenum GL_FRAMEBUFFER_DEFAULT            = 0x8218;
const GLenum GL_FRAMEBUFFER_UNDEFINED          = 0x8219;
const GLenum GL_DEPTH_STENCIL_ATTACHMENT       = 0x821A;
const GLenum GL_DEPTH_STENCIL                  = 0x84F9;
const GLenum GL_UNSIGNED_INT_24_8              = 0x84FA;
const GLenum GL_DEPTH24_STENCIL8               = 0x88F0;
const GLenum GL_UNSIGNED_NORMALIZED            = 0x8C17;
const GLenum GL_DRAW_FRAMEBUFFER_BINDING       = 0x8CA6;
const GLenum GL_READ_FRAMEBUFFER               = 0x8CA8;
const GLenum GL_DRAW_FRAMEBUFFER               = 0x8CA9;
const GLenum GL_READ_FRAMEBUFFER_BINDING       = 0x8CAA;
const GLenum GL_RENDERBUFFER_SAMPLES           = 0x8CAB;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GLenum GL_MAX_COLOR_ATTACHMENTS          = 0x8CDF;
const GLenum GL_COLOR_ATTACHMENT1              = 0x8CE1;
const GLenum GL_COLOR_ATTACHMENT2              = 0x8CE2;
const GLenum GL_COLOR_ATTACHMENT3              = 0x8CE3;
const GLenum GL_COLOR_ATTACHMENT4              = 0x8CE4;
const GLenum GL_COLOR_ATTACHMENT5              = 0x8CE5;
const GLenum GL_COLOR_ATTACHMENT6              = 0x8CE6;
const GLenum GL_COLOR_ATTACHMENT7              = 0x8CE7;
const GLenum GL_COLOR_ATTACHMENT8              = 0x8CE8;
const GLenum GL_COLOR_ATTACHMENT9              = 0x8CE9;
const GLenum GL_COLOR_ATTACHMENT10             = 0x8CEA;
const GLenum GL_COLOR_ATTACHMENT11             = 0x8CEB;
const GLenum GL_COLOR_ATTACHMENT12             = 0x8CEC;
const GLenum GL_COLOR_ATTACHMENT13             = 0x8CED;
const GLenum GL_COLOR_ATTACHMENT14             = 0x8CEE;
const GLenum GL_COLOR_ATTACHMENT15             = 0x8CEF;
const GLenum GL_COLOR_ATTACHMENT16             = 0x8CF0;
const GLenum GL_COLOR_ATTACHMENT17             = 0x8CF1;
const GLenum GL_COLOR_ATTACHMENT18             = 0x8CF2;
const GLenum GL_COLOR_ATTACHMENT19             = 0x8CF3;
const GLenum GL_COLOR_ATTACHMENT20             = 0x8CF4;
const GLenum GL_COLOR_ATTACHMENT21             = 0x8CF5;
const GLenum GL_COLOR_ATTACHMENT22             = 0x8CF6;
const GLenum GL_COLOR_ATTACHMENT23             = 0x8CF7;
const GLenum GL_COLOR_ATTACHMENT24             = 0x8CF8;
const GLenum GL_COLOR_ATTACHMENT25             = 0x8CF9;
const GLenum GL_COLOR_ATTACHMENT26             = 0x8CFA;
const GLenum GL_COLOR_ATTACHMENT27             = 0x8CFB;
const GLenum GL_COLOR_ATTACHMENT28             = 0x8CFC;
const GLenum GL_COLOR_ATTACHMENT29             = 0x8CFD;
const GLenum GL_COLOR_ATTACHMENT30             = 0x8CFE;
const GLenum GL_COLOR_ATTACHMENT31             = 0x8CFF;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GLenum GL_MAX_SAMPLES                    = 0x8D57;
const GLenum GL_HALF_FLOAT                     = 0x140B;
const GLenum GL_MAP_READ_BIT                   = 0x0001;
const GLenum GL_MAP_WRITE_BIT                  = 0x0002;
const GLenum GL_MAP_INVALIDATE_RANGE_BIT       = 0x0004;
const GLenum GL_MAP_INVALIDATE_BUFFER_BIT      = 0x0008;
const GLenum GL_MAP_FLUSH_EXPLICIT_BIT         = 0x0010;
const GLenum GL_MAP_UNSYNCHRONIZED_BIT         = 0x0020;
const GLenum GL_RG                             = 0x8227;
const GLenum GL_RG_INTEGER                     = 0x8228;
const GLenum GL_R8                             = 0x8229;
const GLenum GL_RG8                            = 0x822B;
const GLenum GL_R16F                           = 0x822D;
const GLenum GL_R32F                           = 0x822E;
const GLenum GL_RG16F                          = 0x822F;
const GLenum GL_RG32F                          = 0x8230;
const GLenum GL_R8I                            = 0x8231;
const GLenum GL_R8UI                           = 0x8232;
const GLenum GL_R16I                           = 0x8233;
const GLenum GL_R16UI                          = 0x8234;
const GLenum GL_R32I                           = 0x8235;
const GLenum GL_R32UI                          = 0x8236;
const GLenum GL_RG8I                           = 0x8237;
const GLenum GL_RG8UI                          = 0x8238;
const GLenum GL_RG16I                          = 0x8239;
const GLenum GL_RG16UI                         = 0x823A;
const GLenum GL_RG32I                          = 0x823B;
const GLenum GL_RG32UI                         = 0x823C;
const GLenum GL_VERTEX_ARRAY_BINDING           = 0x85B5;
const GLenum GL_R8_SNORM                       = 0x8F94;
const GLenum GL_RG8_SNORM                      = 0x8F95;
const GLenum GL_RGB8_SNORM                     = 0x8F96;
const GLenum GL_RGBA8_SNORM                    = 0x8F97;
const GLenum GL_SIGNED_NORMALIZED              = 0x8F9C;
const GLenum GL_PRIMITIVE_RESTART_FIXED_INDEX  = 0x8D69;
const GLenum GL_COPY_READ_BUFFER               = 0x8F36;
const GLenum GL_COPY_WRITE_BUFFER              = 0x8F37;
const GLenum GL_COPY_READ_BUFFER_BINDING       = 0x8F36;
const GLenum GL_COPY_WRITE_BUFFER_BINDING      = 0x8F37;
const GLenum GL_UNIFORM_BUFFER                 = 0x8A11;
const GLenum GL_UNIFORM_BUFFER_BINDING         = 0x8A28;
const GLenum GL_UNIFORM_BUFFER_START           = 0x8A29;
const GLenum GL_UNIFORM_BUFFER_SIZE            = 0x8A2A;
const GLenum GL_MAX_VERTEX_UNIFORM_BLOCKS      = 0x8A2B;
const GLenum GL_MAX_FRAGMENT_UNIFORM_BLOCKS    = 0x8A2D;
const GLenum GL_MAX_COMBINED_UNIFORM_BLOCKS    = 0x8A2E;
const GLenum GL_MAX_UNIFORM_BUFFER_BINDINGS    = 0x8A2F;
const GLenum GL_MAX_UNIFORM_BLOCK_SIZE         = 0x8A30;
const GLenum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GLenum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GLenum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GLenum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GLenum GL_ACTIVE_UNIFORM_BLOCKS          = 0x8A36;
const GLenum GL_UNIFORM_TYPE                   = 0x8A37;
const GLenum GL_UNIFORM_SIZE                   = 0x8A38;
const GLenum GL_UNIFORM_NAME_LENGTH            = 0x8A39;
const GLenum GL_UNIFORM_BLOCK_INDEX            = 0x8A3A;
const GLenum GL_UNIFORM_OFFSET                 = 0x8A3B;
const GLenum GL_UNIFORM_ARRAY_STRIDE           = 0x8A3C;
const GLenum GL_UNIFORM_MATRIX_STRIDE          = 0x8A3D;
const GLenum GL_UNIFORM_IS_ROW_MAJOR           = 0x8A3E;
const GLenum GL_UNIFORM_BLOCK_BINDING          = 0x8A3F;
const GLenum GL_UNIFORM_BLOCK_DATA_SIZE        = 0x8A40;
const GLenum GL_UNIFORM_BLOCK_NAME_LENGTH      = 0x8A41;
const GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  = 0x8A42;
const GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GLenum GL_INVALID_INDEX                  = 0xFFFFFFFFu;
const GLenum GL_MAX_VERTEX_OUTPUT_COMPONENTS   = 0x9122;
const GLenum GL_MAX_FRAGMENT_INPUT_COMPONENTS  = 0x9125;
const GLenum GL_MAX_SERVER_WAIT_TIMEOUT        = 0x9111;
const GLenum GL_OBJECT_TYPE                    = 0x9112;
const GLenum GL_SYNC_CONDITION                 = 0x9113;
const GLenum GL_SYNC_STATUS                    = 0x9114;
const GLenum GL_SYNC_FLAGS                     = 0x9115;
const GLenum GL_SYNC_FENCE                     = 0x9116;
const GLenum GL_SYNC_GPU_COMMANDS_COMPLETE     = 0x9117;
const GLenum GL_UNSIGNALED                     = 0x9118;
const GLenum GL_SIGNALED                       = 0x9119;
const GLenum GL_ALREADY_SIGNALED               = 0x911A;
const GLenum GL_TIMEOUT_EXPIRED                = 0x911B;
const GLenum GL_CONDITION_SATISFIED            = 0x911C;
const GLenum GL_WAIT_FAILED                    = 0x911D;
const GLenum GL_SYNC_FLUSH_COMMANDS_BIT        = 0x00000001;
const u64 GL_TIMEOUT_IGNORED                   = 0xFFFFFFFFFFFFFFFFull;
const GLenum GL_VERTEX_ATTRIB_ARRAY_DIVISOR    = 0x88FE;
const GLenum GL_ANY_SAMPLES_PASSED             = 0x8C2F;
const GLenum GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GLenum GL_SAMPLER_BINDING                = 0x8919;
const GLenum GL_RGB10_A2UI                     = 0x906F;
const GLenum GL_TEXTURE_SWIZZLE_R              = 0x8E42;
const GLenum GL_TEXTURE_SWIZZLE_G              = 0x8E43;
const GLenum GL_TEXTURE_SWIZZLE_B              = 0x8E44;
const GLenum GL_TEXTURE_SWIZZLE_A              = 0x8E45;
const GLenum GL_GREEN                          = 0x1904;
const GLenum GL_BLUE                           = 0x1905;
const GLenum GL_INT_2_10_10_10_REV             = 0x8D9F;
const GLenum GL_TRANSFORM_FEEDBACK             = 0x8E22;
const GLenum GL_TRANSFORM_FEEDBACK_PAUSED      = 0x8E23;
const GLenum GL_TRANSFORM_FEEDBACK_ACTIVE      = 0x8E24;
const GLenum GL_TRANSFORM_FEEDBACK_BINDING     = 0x8E25;
const GLenum GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GLenum GL_PROGRAM_BINARY_LENGTH          = 0x8741;
const GLenum GL_NUM_PROGRAM_BINARY_FORMATS     = 0x87FE;
const GLenum GL_PROGRAM_BINARY_FORMATS         = 0x87FF;
const GLenum GL_COMPRESSED_R11_EAC             = 0x9270;
const GLenum GL_COMPRESSED_SIGNED_R11_EAC      = 0x9271;
const GLenum GL_COMPRESSED_RG11_EAC            = 0x9272;
const GLenum GL_COMPRESSED_SIGNED_RG11_EAC     = 0x9273;
const GLenum GL_COMPRESSED_RGB8_ETC2           = 0x9274;
const GLenum GL_COMPRESSED_SRGB8_ETC2          = 0x9275;
const GLenum GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GLenum GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GLenum GL_COMPRESSED_RGBA8_ETC2_EAC      = 0x9278;
const GLenum GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GLenum GL_TEXTURE_IMMUTABLE_FORMAT       = 0x912F;
const GLenum GL_MAX_ELEMENT_INDEX              = 0x8D6B;
const GLenum GL_NUM_SAMPLE_COUNTS              = 0x9380;
const GLenum GL_TEXTURE_IMMUTABLE_LEVELS       = 0x82DF;

const GLenum GL_POINT                          = 0x1B00;
const GLenum GL_LINE                           = 0x1B01;
const GLenum GL_FILL                           = 0x1B02;

const GLenum WGL_CONTEXT_DEBUG_BIT_ARB         = 0x00000001;
const GLenum WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
const GLenum WGL_CONTEXT_MAJOR_VERSION_ARB     = 0x2091;
const GLenum WGL_CONTEXT_MINOR_VERSION_ARB     = 0x2092;
const GLenum WGL_CONTEXT_LAYER_PLANE_ARB       = 0x2093;
const GLenum WGL_CONTEXT_FLAGS_ARB             = 0x2094;
#define ERROR_INVALID_VERSION_ARB         0x2095

const GLenum WGL_CONTEXT_PROFILE_MASK_ARB      = 0x9126;
const GLenum WGL_CONTEXT_CORE_PROFILE_BIT_ARB  = 0x00000001;
const GLenum WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
#define ERROR_INVALID_PROFILE_ARB         0x2096

const GLenum WGL_SAMPLE_BUFFERS_ARB            = 0x2041;
const GLenum WGL_SAMPLES_ARB                   = 0x2042;

const GLenum WGL_NUMBER_PIXEL_FORMATS_ARB      = 0x2000;
const GLenum WGL_DRAW_TO_WINDOW_ARB            = 0x2001;
const GLenum WGL_DRAW_TO_BITMAP_ARB            = 0x2002;
const GLenum WGL_ACCELERATION_ARB              = 0x2003;
const GLenum WGL_NEED_PALETTE_ARB              = 0x2004;
const GLenum WGL_NEED_SYSTEM_PALETTE_ARB       = 0x2005;
const GLenum WGL_SWAP_LAYER_BUFFERS_ARB        = 0x2006;
const GLenum WGL_SWAP_METHOD_ARB               = 0x2007;
const GLenum WGL_NUMBER_OVERLAYS_ARB           = 0x2008;
const GLenum WGL_NUMBER_UNDERLAYS_ARB          = 0x2009;
const GLenum WGL_TRANSPARENT_ARB               = 0x200A;
const GLenum WGL_TRANSPARENT_RED_VALUE_ARB     = 0x2037;
const GLenum WGL_TRANSPARENT_GREEN_VALUE_ARB   = 0x2038;
const GLenum WGL_TRANSPARENT_BLUE_VALUE_ARB    = 0x2039;
const GLenum WGL_TRANSPARENT_ALPHA_VALUE_ARB   = 0x203A;
const GLenum WGL_TRANSPARENT_INDEX_VALUE_ARB   = 0x203B;
const GLenum WGL_SHARE_DEPTH_ARB               = 0x200C;
const GLenum WGL_SHARE_STENCIL_ARB             = 0x200D;
const GLenum WGL_SHARE_ACCUM_ARB               = 0x200E;
const GLenum WGL_SUPPORT_GDI_ARB               = 0x200F;
const GLenum WGL_SUPPORT_OPENGL_ARB            = 0x2010;
const GLenum WGL_DOUBLE_BUFFER_ARB             = 0x2011;
const GLenum WGL_STEREO_ARB                    = 0x2012;
const GLenum WGL_PIXEL_TYPE_ARB                = 0x2013;
const GLenum WGL_COLOR_BITS_ARB                = 0x2014;
const GLenum WGL_RED_BITS_ARB                  = 0x2015;
const GLenum WGL_RED_SHIFT_ARB                 = 0x2016;
const GLenum WGL_GREEN_BITS_ARB                = 0x2017;
const GLenum WGL_GREEN_SHIFT_ARB               = 0x2018;
const GLenum WGL_BLUE_BITS_ARB                 = 0x2019;
const GLenum WGL_BLUE_SHIFT_ARB                = 0x201A;
const GLenum WGL_ALPHA_BITS_ARB                = 0x201B;
const GLenum WGL_ALPHA_SHIFT_ARB               = 0x201C;
const GLenum WGL_ACCUM_BITS_ARB                = 0x201D;
const GLenum WGL_ACCUM_RED_BITS_ARB            = 0x201E;
const GLenum WGL_ACCUM_GREEN_BITS_ARB          = 0x201F;
const GLenum WGL_ACCUM_BLUE_BITS_ARB           = 0x2020;
const GLenum WGL_ACCUM_ALPHA_BITS_ARB          = 0x2021;
const GLenum WGL_DEPTH_BITS_ARB                = 0x2022;
const GLenum WGL_STENCIL_BITS_ARB              = 0x2023;
const GLenum WGL_AUX_BUFFERS_ARB               = 0x2024;
const GLenum WGL_NO_ACCELERATION_ARB           = 0x2025;
const GLenum WGL_GENERIC_ACCELERATION_ARB      = 0x2026;
const GLenum WGL_FULL_ACCELERATION_ARB         = 0x2027;
const GLenum WGL_SWAP_EXCHANGE_ARB             = 0x2028;
const GLenum WGL_SWAP_COPY_ARB                 = 0x2029;
const GLenum WGL_SWAP_UNDEFINED_ARB            = 0x202A;
const GLenum WGL_TYPE_RGBA_ARB                 = 0x202B;
const GLenum WGL_TYPE_COLORINDEX_ARB           = 0x202C;

#if defined(__MINGW32__) && defined(GL_NO_STDCALL) || defined(UNDER_CE)
#define GLAPIENTRY
#else
#define GLAPIENTRY __stdcall
#endif

typedef GLenum (GLAPIENTRY *glGetErrorProc)();
typedef void (GLAPIENTRY *glGetIntegervProc)(GLenum pname, GLint *params);
typedef void (GLAPIENTRY *glClearColorProc)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void (GLAPIENTRY *glClearProc)(GLbitfield mask);
typedef void (GLAPIENTRY *glViewportProc)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY *glEnableProc)(GLenum cap);
typedef void (GLAPIENTRY *glDisableProc)(GLenum cap);
typedef void (GLAPIENTRY *glFrontFaceProc)(GLenum mode);
typedef void (GLAPIENTRY *glDepthMaskProc)(GLboolean flag);
typedef void (GLAPIENTRY *glDepthFuncProc)(GLenum func);
typedef void (GLAPIENTRY *glBlendFuncProc)(GLenum sfactor, GLenum dfactor);
typedef void (GLAPIENTRY *glBlendFuncSeparateProc)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAPIENTRY *glGenFramebuffersProc)(GLsizei n, GLuint *ids);
typedef void (GLAPIENTRY *glBindFramebufferProc)(GLenum target, GLuint framebuffer);
typedef void (GLAPIENTRY *glFramebufferTextureProc)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPIENTRY *glFramebufferTexture2DProc)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY *glFramebufferRenderbufferProc)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPIENTRY *glDrawBuffersProc)(GLsizei n, const GLenum *bufs);
typedef GLenum (GLAPIENTRY *glCheckFramebufferStatusProc)(GLenum target);
typedef void (GLAPIENTRY *glBlitFramebufferProc)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAPIENTRY *glGenTexturesProc)(GLsizei n, GLuint *textures);
typedef void (GLAPIENTRY *glDeleteTexturesProc)(GLsizei n, GLuint *textures);
typedef void (GLAPIENTRY *glBindTextureProc)(GLenum target, GLuint texture);
typedef void (GLAPIENTRY *glBindSamplerProc)(GLenum target, GLuint sampler);
typedef void (GLAPIENTRY *glTexImage2DProc)(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *data);
typedef void (GLAPIENTRY *glGenerateMipmapProc)(GLenum target);
typedef void (GLAPIENTRY *glTexParameteriProc)(GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY *glGenRenderbuffersProc)(GLsizei n, GLuint *renderbuffers);
typedef void (GLAPIENTRY *glBindRenderbufferProc)(GLenum target, GLuint renderbuffer);
typedef void (GLAPIENTRY *glRenderbufferStorageProc)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLuint (GLAPIENTRY *glCreateShaderProc)(GLenum shaderType);
typedef void (GLAPIENTRY *glDetachShaderProc)(GLuint program, GLuint shader);
typedef void (GLAPIENTRY *glDeleteShaderProc)(GLuint shader);
typedef void (GLAPIENTRY *glShaderSourceProc)(GLuint shader, GLsizei count, const GLchar **string, const GLint *length);
typedef void (GLAPIENTRY *glCompileShaderProc)(GLuint shader);
typedef void (GLAPIENTRY *glGetShaderivProc)(GLuint shader, GLenum pname, GLint *params);
typedef void (GLAPIENTRY *glGetShaderInfoLogProc)(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
typedef GLuint (GLAPIENTRY *glCreateProgramProc)();
typedef void (GLAPIENTRY *glDeleteProgramProc)(GLuint program);
typedef void (GLAPIENTRY *glAttachShaderProc)(GLuint program, GLuint shader);
typedef void (GLAPIENTRY *glLinkProgramProc)(GLuint program);
typedef void (GLAPIENTRY *glGetAttachedShadersProc)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef void (GLAPIENTRY *glGetProgramivProc)(GLuint program, GLenum pname, GLint *params);
typedef void (GLAPIENTRY *glGetProgramInfoLogProc)(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
typedef void (GLAPIENTRY *glUseProgramProc)(GLuint program);
typedef void (GLAPIENTRY *glBindAttribLocationProc)(GLuint program, GLuint index, const GLchar *name);
typedef GLint (GLAPIENTRY *glGetUniformLocationProc)(GLuint program, const GLchar *name);
typedef GLint (GLAPIENTRY *glGetAttribLocationProc)(GLuint program, const GLchar *name);
typedef void (GLAPIENTRY *glUniform1iProc)(GLint location, GLint v0);
typedef void (GLAPIENTRY *glUniform1fProc)(GLint location, GLfloat v0);
typedef void (GLAPIENTRY *glUniform2fProc)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAPIENTRY *glUniform3fProc)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAPIENTRY *glUniform4fProc)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAPIENTRY *glUniform1fvProc)(GLint location, GLsizei count, const GLfloat *v);
typedef void (GLAPIENTRY *glUniform2fvProc)(GLint location, GLsizei count, const GLfloat *v);
typedef void (GLAPIENTRY *glUniform3fvProc)(GLint location, GLsizei count, const GLfloat *v);
typedef void (GLAPIENTRY *glUniform4fvProc)(GLint location, GLsizei count, const GLfloat *v);
typedef void (GLAPIENTRY *glUniformMatrix4fvProc)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY *glActiveTextureProc)(GLenum texture);
typedef void (GLAPIENTRY *glGenBuffersProc)(GLsizei n, GLuint *buffers);
typedef void (GLAPIENTRY *glDeleteBuffersProc)(GLsizei n, GLuint *buffers);
typedef void (GLAPIENTRY *glBindBufferProc)(GLenum target, GLuint buffer);
typedef void (GLAPIENTRY *glBufferDataProc)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
typedef void (GLAPIENTRY *glBufferSubDataProc)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
typedef void (GLAPIENTRY *glGenVertexArraysProc)(GLsizei n, GLuint *arrays);
typedef void (GLAPIENTRY *glDeleteVertexArraysProc)(GLsizei n, GLuint *arrays);
typedef void (GLAPIENTRY *glBindVertexArrayProc)(GLuint array);
typedef void (GLAPIENTRY *glVertexAttribPointerProc)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
typedef void (GLAPIENTRY *glVertexAttribIPointerProc)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void (GLAPIENTRY *glVertexAttribDivisorProc)(GLuint index, GLuint divisor);
typedef void (GLAPIENTRY *glEnableVertexAttribArrayProc)(GLuint index);
typedef void (GLAPIENTRY *glDrawArraysProc)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAPIENTRY *glDrawArraysInstancedProc)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAPIENTRY *glDrawElementsProc)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
typedef void (GLAPIENTRY *glDrawElementsInstancedProc)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
typedef void (GLAPIENTRY *glDrawElementsBaseVertexProc)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
typedef void (GLAPIENTRY *glBlendEquationProc)(GLenum mode);
typedef void (GLAPIENTRY *glBlendEquationSeparateProc)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPIENTRY *glDebugOutputProc)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
typedef void (GLAPIENTRY *glDebugMessageCallbackProc)(glDebugOutputProc callback, void *userParam);
typedef void (GLAPIENTRY *glDebugMessageControlProc)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (GLAPIENTRY *glScissorProc)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY *glPixelStoreiProc)(GLenum pname, GLint param);
typedef GLboolean (GLAPIENTRY *glIsEnabledProc)(GLenum cap);
typedef void (GLAPIENTRY *glPolygonModeProc)(GLenum face, GLenum mode);
#if TARGET_WINDOWS
typedef BOOL (WINAPI *wglChoosePixelFormatARBProc)(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef HGLRC (WINAPI *wglCreateContextAttribsARBProc)(HDC hDC, HGLRC hShareContext, const int *attribList);
#endif

#define GL_DeclareProc(name) name##Proc name
GL_DeclareProc(glGetError);
GL_DeclareProc(glGetIntegerv);
GL_DeclareProc(glClearColor);
GL_DeclareProc(glClear);
GL_DeclareProc(glViewport);
GL_DeclareProc(glEnable);
GL_DeclareProc(glDisable);
GL_DeclareProc(glFrontFace);
GL_DeclareProc(glDepthMask);
GL_DeclareProc(glDepthFunc);
GL_DeclareProc(glBlendFunc);
GL_DeclareProc(glBlendFuncSeparate);
GL_DeclareProc(glGenFramebuffers);
GL_DeclareProc(glBindFramebuffer);
GL_DeclareProc(glFramebufferTexture);
GL_DeclareProc(glFramebufferTexture2D);
GL_DeclareProc(glFramebufferRenderbuffer);
GL_DeclareProc(glDrawBuffers);
GL_DeclareProc(glCheckFramebufferStatus);
GL_DeclareProc(glBlitFramebuffer);
GL_DeclareProc(glGenTextures);
GL_DeclareProc(glDeleteTextures);
GL_DeclareProc(glBindTexture);
GL_DeclareProc(glBindSampler);
GL_DeclareProc(glTexImage2D);
GL_DeclareProc(glGenerateMipmap);
GL_DeclareProc(glTexParameteri);
GL_DeclareProc(glGenRenderbuffers);
GL_DeclareProc(glBindRenderbuffer);
GL_DeclareProc(glRenderbufferStorage);
GL_DeclareProc(glCreateShader);
GL_DeclareProc(glDetachShader);
GL_DeclareProc(glDeleteShader);
GL_DeclareProc(glShaderSource);
GL_DeclareProc(glCompileShader);
GL_DeclareProc(glGetShaderiv);
GL_DeclareProc(glGetShaderInfoLog);
GL_DeclareProc(glCreateProgram);
GL_DeclareProc(glDeleteProgram);
GL_DeclareProc(glAttachShader);
GL_DeclareProc(glLinkProgram);
GL_DeclareProc(glGetAttachedShaders);
GL_DeclareProc(glGetProgramiv);
GL_DeclareProc(glGetProgramInfoLog);
GL_DeclareProc(glUseProgram);
GL_DeclareProc(glBindAttribLocation);
GL_DeclareProc(glGetUniformLocation);
GL_DeclareProc(glGetAttribLocation);
GL_DeclareProc(glUniformMatrix4fv);
GL_DeclareProc(glUniform1i);
GL_DeclareProc(glUniform1f);
GL_DeclareProc(glUniform2f);
GL_DeclareProc(glUniform3f);
GL_DeclareProc(glUniform4f);
GL_DeclareProc(glUniform1fv);
GL_DeclareProc(glUniform2fv);
GL_DeclareProc(glUniform3fv);
GL_DeclareProc(glUniform4fv);
GL_DeclareProc(glActiveTexture);
GL_DeclareProc(glGenBuffers);
GL_DeclareProc(glDeleteBuffers);
GL_DeclareProc(glBindBuffer);
GL_DeclareProc(glBufferData);
GL_DeclareProc(glBufferSubData);
GL_DeclareProc(glGenVertexArrays);
GL_DeclareProc(glDeleteVertexArrays);
GL_DeclareProc(glBindVertexArray);
GL_DeclareProc(glVertexAttribPointer);
GL_DeclareProc(glVertexAttribIPointer);
GL_DeclareProc(glVertexAttribDivisor);
GL_DeclareProc(glEnableVertexAttribArray);
GL_DeclareProc(glDrawArrays);
GL_DeclareProc(glDrawArraysInstanced);
GL_DeclareProc(glDrawElements);
GL_DeclareProc(glDrawElementsInstanced);
GL_DeclareProc(glDrawElementsBaseVertex);
GL_DeclareProc(glBlendEquation);
GL_DeclareProc(glBlendEquationSeparate);
GL_DeclareProc(glScissor);
GL_DeclareProc(glPixelStorei);
GL_DeclareProc(glIsEnabled);
GL_DeclareProc(glPolygonMode);
#if TARGET_WINDOWS
GL_DeclareProc(wglChoosePixelFormatARB);
GL_DeclareProc(wglCreateContextAttribsARB);
#endif
#undef GL_DeclareProc

#if TARGET_WINDOWS
void *GL_GetProcAddress(const char *name)
{
	void *p = (void *)wglGetProcAddress(name);
	if(p == 0 ||
		(p == (void*)0x1) || (p == (void*)0x2) || (p == (void*)0x3) ||
		(p == (void*)-1) )
	{
		HMODULE module = LoadLibraryA("opengl32.dll");
		p = (void *)GetProcAddress(module, name);
	}

	return p;
}
#else
static_assert(false, "This platform has no way to link OpenGL functions!");
#endif

void LoadOpenGLProcs()
{
#define GL_GetProc(name) name = ((name##Proc) GL_GetProcAddress(#name))
	GL_GetProc(glGetError);
	GL_GetProc(glGetIntegerv);
	GL_GetProc(glClearColor);
	GL_GetProc(glClear);
	GL_GetProc(glViewport);
	GL_GetProc(glEnable);
	GL_GetProc(glDisable);
	GL_GetProc(glFrontFace);
	GL_GetProc(glDepthMask);
	GL_GetProc(glDepthFunc);
	GL_GetProc(glBlendFunc);
	GL_GetProc(glBlendFuncSeparate);
	GL_GetProc(glGenFramebuffers);
	GL_GetProc(glBindFramebuffer);
	GL_GetProc(glFramebufferTexture);
	GL_GetProc(glFramebufferTexture2D);
	GL_GetProc(glFramebufferRenderbuffer);
	GL_GetProc(glDrawBuffers);
	GL_GetProc(glCheckFramebufferStatus);
	GL_GetProc(glBlitFramebuffer);
	GL_GetProc(glGenTextures);
	GL_GetProc(glDeleteTextures);
	GL_GetProc(glBindTexture);
	GL_GetProc(glBindSampler);
	GL_GetProc(glTexImage2D);
	GL_GetProc(glGenerateMipmap);
	GL_GetProc(glTexParameteri);
	GL_GetProc(glGenRenderbuffers);
	GL_GetProc(glBindRenderbuffer);
	GL_GetProc(glRenderbufferStorage);
	GL_GetProc(glCreateShader);
	GL_GetProc(glDetachShader);
	GL_GetProc(glDeleteShader);
	GL_GetProc(glShaderSource);
	GL_GetProc(glCompileShader);
	GL_GetProc(glGetShaderiv);
	GL_GetProc(glGetShaderInfoLog);
	GL_GetProc(glCreateProgram);
	GL_GetProc(glDeleteProgram);
	GL_GetProc(glAttachShader);
	GL_GetProc(glLinkProgram);
	GL_GetProc(glGetAttachedShaders);
	GL_GetProc(glGetProgramiv);
	GL_GetProc(glGetProgramInfoLog);
	GL_GetProc(glUseProgram);
	GL_GetProc(glBindAttribLocation);
	GL_GetProc(glGetUniformLocation);
	GL_GetProc(glGetAttribLocation);
	GL_GetProc(glUniformMatrix4fv);
	GL_GetProc(glUniform1i);
	GL_GetProc(glUniform1f);
	GL_GetProc(glUniform2f);
	GL_GetProc(glUniform3f);
	GL_GetProc(glUniform4f);
	GL_GetProc(glUniform1fv);
	GL_GetProc(glUniform2fv);
	GL_GetProc(glUniform3fv);
	GL_GetProc(glUniform4fv);
	GL_GetProc(glActiveTexture);
	GL_GetProc(glGenBuffers);
	GL_GetProc(glDeleteBuffers);
	GL_GetProc(glBindBuffer);
	GL_GetProc(glBufferData);
	GL_GetProc(glBufferSubData);
	GL_GetProc(glGenVertexArrays);
	GL_GetProc(glDeleteVertexArrays);
	GL_GetProc(glBindVertexArray);
	GL_GetProc(glVertexAttribPointer);
	GL_GetProc(glVertexAttribIPointer);
	GL_GetProc(glVertexAttribDivisor);
	GL_GetProc(glEnableVertexAttribArray);
	GL_GetProc(glDrawArrays);
	GL_GetProc(glDrawArraysInstanced);
	GL_GetProc(glDrawElements);
	GL_GetProc(glDrawElementsInstanced);
	GL_GetProc(glDrawElementsBaseVertex);
	GL_GetProc(glBlendEquation);
	GL_GetProc(glBlendEquationSeparate);
	GL_GetProc(glScissor);
	GL_GetProc(glPixelStorei);
	GL_GetProc(glIsEnabled);
	GL_GetProc(glPolygonMode);
#if TARGET_WINDOWS
	GL_GetProc(wglChoosePixelFormatARB);
	GL_GetProc(wglCreateContextAttribsARB);
#endif
#undef GL_GetProc
}

struct PlatformCode
{
	void (*Log)(const char *format, ...);
	bool (*PlatformReadEntireFile)(const char *filename, u8 **fileBuffer, u64 *fileSize, void *(*allocFunc)(u64));
	void (*SetUpDevice)();
	void (*ClearBuffers)(v4 clearColor);
	DeviceUniform (*GetUniform)(DeviceProgram program, const char *name);
	void (*UseProgram)(DeviceProgram program);
	void (*UniformMat4)(DeviceUniform uniform, u32 count, const f32 *buffer);
	void (*UniformInt)(DeviceUniform uniform, int n);
	void (*RenderIndexedMesh)(DeviceMesh mesh);
	void (*RenderMesh)(DeviceMesh mesh);
	void (*RenderLines)(DeviceMesh mesh);
	void (*RenderMeshInstanced)(DeviceMesh mesh, DeviceMesh positions, u32 meshAttribs, u32 instAttribs);
	void (*RenderIndexedMeshInstanced)(DeviceMesh mesh, DeviceMesh positions, u32 meshAttribs, u32 instAttribs);
	DeviceMesh (*CreateDeviceMesh)(int attribs);
	DeviceMesh (*CreateDeviceIndexedMesh)(int attribs);
	DeviceTexture (*CreateDeviceTexture)();
	void (*SendMesh)(DeviceMesh *mesh, void *vertexData, u32 vertexCount, u32 stride, bool dynamic);
	void (*SendIndexedMesh)(DeviceMesh *mesh, void *vertexData, u32 vertexCount, u32 stride, void *indexData, u32 indexCount, bool dynamic);
	void (*SendTexture)(DeviceTexture texture, const void *imageData, u32 width, u32 height, u32 components);
	void (*BindTexture)(DeviceTexture texture, int slot);
	DeviceShader (*CreateShader)(ShaderType shaderType);
	bool (*LoadShader)(DeviceShader *shader, const char *shaderSource);
	void (*AttachShader)(DeviceProgram program, DeviceShader shader);
	DeviceProgram (*CreateDeviceProgram)();
	bool (*LinkDeviceProgram)(DeviceProgram program);
	void (*WipeDeviceProgram)(DeviceProgram program);
	void (*SetFillMode)(RenderFillMode mode);
	const Resource *(*LoadResource)(ResourceType type, const char *filename);
	const Resource *(*GetResource)(const char *filename);
};
